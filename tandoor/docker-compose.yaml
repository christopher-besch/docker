version: "3.7"

services:
    TDDatabase:
        image: postgres:11-alpine
        container_name: "TDDatabase_${NAME}"
        volumes:
            - ${TD_PATH}/td_postgres:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=tandoor
            - POSTGRES_PASSWORD
            - POSTGRES_DB=tandoordb
        restart: "unless-stopped"
        networks: ["common"]

    TDFrontend:
        image: vabene1111/recipes:latest
        container_name: "TDFrontend_${NAME}"
        volumes:
            - ${TD_PATH}/td_data/staticfiles:/opt/recipes/staticfiles
            - ${TD_PATH}/td_data/mediafiles:/opt/recipes/mediafiles
            - nginx_config:/opt/recipes/nginx/conf.d:ro

        environment:
            - ALLOWED_HOSTS=${DOMAIN}
            - LETSENCRYPT_HOST=${DOMAIN}
            - VIRTUAL_HOST=${DOMAIN}
            - SECRET_KEY
            - TIMEZONE=Europe/Berlin
            - DB_ENGINE=django.db.backends.postgresql
            - POSTGRES_HOST=TDDatabase
            - POSTGRES_PORT=5432
            - POSTGRES_USER=tandoor
            - POSTGRES_PASSWORD
            - POSTGRES_DB=tandoordb
            - GUNICORN_MEDIA=1
            - DEBUG=0

        depends_on:
            - "TDDatabase"
        restart: "unless-stopped"
        networks: ["net", "common"]

    DockerBorgBackup:
        image: chrisbesch/docker_borg_backup
        volumes:
            - "$TD_PATH:/origin:ro"
            - "$BORG_REPO:/repo"
            # needs to be able to start and stop other containers
            - "/var/run/docker.sock:/var/run/docker.sock:rw"
        environment:
            - TZ=Europe/Berlin
            - CRON_TIME=${BACKUP_CRON}
            - BORG_COMPRESSION
            - BORG_PREFIX=$NAME
            - PRUNE_CFG
            # stop these containers before backup
            - "CONTAINERS=TDDatabase_${NAME} TDFrontend_${NAME}"

volumes:
    nginx_config:
        external: true

networks:
    net:
        external: true
    common:
        internal: true

